name: Sync branches
description: Sync main, master, and release branches on PR merge.

on:
  pull_request:
    branches:
      - master
      - release
    types:
      - closed

jobs:
  sync-main:
    name: Sync main
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MY_TOKEN }}
      - name: Create pull request
        env:
          GH_TOKEN: ${{ secrets.MY_TOKEN }}
        run: |
          workflow=$(echo '${{ github.workflow }}' | tr '[:upper:]' '[:lower:]')
          body='Auto-generated by the ['$workflow'](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) workflow.'
          url=$(gh pr create -B main -H ${{ github.base_ref }} --title 'Sync main with ${{ github.base_ref }}' --body "$body")
          gh pr merge $url --auto --merge
          # gh pr review $url --approve

  sync-release:
    name: Sync release
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.head_ref != 'release' && github.base_ref == 'master'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MY_TOKEN }}
      - name: Create pull request
        env:
          GH_TOKEN: ${{ secrets.MY_TOKEN }}
        run: |
          git fetch --unshallow
          if [[ -n $(git ls-remote --heads origin release) ]]; then
            workflow=$(echo '${{ github.workflow }}' | tr '[:upper:]' '[:lower:]')
            body='Auto-generated by the ['$workflow'](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) workflow.'
            url=$(gh pr create -B release -H ${{ github.base_ref }} --title 'Sync release with ${{ github.base_ref }}' --body "$body")
            gh pr merge $url --auto --merge
            # gh pr review $url --approve
          else
            echo "Release branch not found, skipping."
          fi

  drop-release:
    name: Drop release
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.head_ref == 'release' && github.base_ref == 'master'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MY_TOKEN }}
      - name: Drop release branch
        run: |
          git fetch --unshallow
          if [[ -n $(git ls-remote --heads origin release) ]]; then
            git push origin --delete release
          else
            echo "Release branch not found, skipping."
          fi
